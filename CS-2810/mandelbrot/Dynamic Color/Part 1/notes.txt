In this step you will update your Mandelbrot fractal generator to create images of any size, zoomed in at any location.

Start by copying over all of your code from the fixed fractal generator. Copy your fixedimage.asm file over to dynamicimage.asm.

One new file is provided here: params.asm. It specifics the parameters of the image to be generated, including:

- filename: the name of the output file to create. You will change your code to get this parameter here instead of wherever you had it before.
- xcenter: this is a 64-bit float value specifying the center point of the image to create.
- ycenter: this is a 64-bit float value specifying the center point of the image to create.
- mag: the magnification level to apply when generating the image.
- xsize: the size of the image to create, in pixels. You will change your code to use this value instead of having it hard-coded as 256.
- ysize: the size of the image to create, in pixels. You will change your code to use this value instead of having it hard-coded as 256.
- iters: the maximum number of iterations to apply when computing a pixel. You will change your code to use this value instead of having it hard-coded.
- antialias: you will use this value in a future project; ignore it for now.
Do not change the names of any of these parameters.

Changing the image size

In dynamicimage.asm, change the code to use the image size values provided in params.asm. You will need to change the X and Y sizes in the image header, and in the loops that produce the actual pixels.

Modify your code to use the filename provided in params.asm, and the maximum number of iterations. You should reference these values from dynamicimage.asm, and pass them as parameters to the appropriate functions. The other source files should not need to reference params.asm directly.

Everything defined in params.asm is exported as a global variable. It would be nice to accept these parameters as command-line options, but parsing them would be a lot of work. To simplify things, we hard code them as global variables. However, you should treat them as though they were local variables in your start function, and pass them as needed to other functions.

With this step completed, you should be able to generate a valid fractal.ppm file whose size is dictated by params.asm. Remember to include global _start when compiling your code as a standalone executable, but comment than line out when running unit tests.

Changing the center and zoom level

The major change for this step is in calcPixel. Before, it acted as a function:

calcPixel(maxiters, column, row) → rgb
You must modify it to accept additional parameters:

calcPixel(maxiters, column, row, xsize, ysize, xcenter, ycenter, magnification) → rgb
Recall that the first six integers parameters are passed in the integer registers (5 are needed here), and float parameters are passed in the xmm registers, starting with xmm0.

Modify your start function to pass the correct parameters to calcPixel. Note that only column and row will change from pixel to pixel, but you must pass all of the other parameters in with each call.

Update calcPixel to compute the X and Y values to be passed along to your mandel function. Here are the formulas to compute them:

x = xcenter + (column - xsize/2) / (magnification * (minsize - 1))
y = ycenter - (row - ysize/2) / (magnification * (minsize - 1))
We will talk in class about how these formulas are derived.

Some of these values are integers, and some are floats. For the integer values, do as much computation as you can as integers, then convert them to floats using the cvtsi2sd instruction.

minsize refers to the smaller of xsize and ysize. The magnification of the image is based on the largest square that fits completely in the generated image, and then additional bars will be rendered on the top and bottom or left and right sides, depending on whether the image has portrait or landscape dimensions.

Note that both X and Y require division by the same value: (magnification * (minsize - 1)). Compute it once, and use it twice when computing X and Y.

In general, the results of a computation using finite-precision floats will be more accurate this way. Computing a single large value and dividing it by another single large value is better than computing a small value, dividing it by a large value (giving a very small value with round errors), and then multiplying it by something large. The general strategy is to avoid having any intermediate results where significant precision is lost to rounding errors. Sometimes re-arranging the order of computations can yield more accurate results. Mandelbrot fractals are one place where we push up against the limits of 64-bit floats, so it is worth worrying about these issues.

If you plan it carefully, it is pretty straightforward to compute the required values and then call mandel as before.





